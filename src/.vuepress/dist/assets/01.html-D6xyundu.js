import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as e}from"./app-5tcj8GiM.js";const t="/essayBlog/assets/buffer1-ovK9KD5x.png",p="/essayBlog/assets/buffer2-HfBomALu.png",o={},c=e('<h2 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念"><span><strong>1. 概念</strong></span></a></h2><p>Buffer 是一个类似于数组的 <code>对象</code>，用于表示固定长度的字节序列<br> Buffer 本质是一段内存空间，专门用来处理 二进制数据 。<br><img src="'+t+'" alt="alt text" loading="lazy"></p><h2 id="_2-特点" tabindex="-1"><a class="header-anchor" href="#_2-特点"><span><strong>2. 特点</strong></span></a></h2><ol><li>Buffer 大小固定且无法调整</li><li>Buffer性能较好，可以直接对计算机内存进行操作</li><li>每个元素的大小为1字节（byte）<br><img src="'+p+`" alt="alt text" loading="lazy"></li></ol><h2 id="_3-使用" tabindex="-1"><a class="header-anchor" href="#_3-使用"><span><strong>3. 使用</strong></span></a></h2><h3 id="_3-1-创建buffer" tabindex="-1"><a class="header-anchor" href="#_3-1-创建buffer"><span><strong>3-1. 创建Buffer</strong></span></a></h3><p>Node.js中创建Buffer的方式主要有以下几种：</p><ol><li>Buffer.alloc</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token comment">// 创建了一个长度为10字节的Buffer，相当于申请了10字节的内存空间，每个字节的值为0</span>
 <span class="token keyword">let</span> buf_1 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果为&lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Buffer.allocUnsafe</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个长度为10字节的Buffer，buffer中可能存在旧数据，可能会影响执行结果，所以叫unsafe</span>
<span class="token keyword">let</span> buf_2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">allocUnsafe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Buffer.from</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 通过字符串创建Buffer</span>
<span class="token keyword">let</span> buf_3 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 通过数组创建Buffer</span>
<span class="token keyword">let</span> buf_4 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-buffer与字符串转化" tabindex="-1"><a class="header-anchor" href="#_3-2-buffer与字符串转化"><span><strong>3-2. Buffer与字符串转化</strong></span></a></h3><p>我们可以借助<code>toString</code>方法将Buffer转为字符串</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> buf_4 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf_4<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>toString默认按照<code>utf-8</code>编码方式进行转换的</p></div><h3 id="_3-3-buffer的读写" tabindex="-1"><a class="header-anchor" href="#_3-3-buffer的读写"><span><strong>3-3. Buffer的读写</strong></span></a></h3><p>Buffer可以直接通过<code>[]</code>的方式对数据进行处理</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 读取</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf_3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// 修改</span>
buf_3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">97</span>
<span class="token comment">// 查看字符串结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf_3<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>注意：<br> 1.如果修改的数值超过<code>255</code>，则超过8位数据会被舍弃<br> 2.一个utf-8的字符<code>一般</code>占3个字节</p></div>`,21),l=[c];function i(r,u){return s(),a("div",null,l)}const k=n(o,[["render",i],["__file","01.html.vue"]]),m=JSON.parse('{"path":"/server/node/01.html","title":"01 Buffer（缓冲器）","lang":"zh-CN","frontmatter":{"title":"01 Buffer（缓冲器）","category":["服务端"],"tag":["node"],"head":[["meta",{"property":"og:url","content":"https://kuailedaima.github.io/essayBlog/essayBlog/server/node/01.html"}],["meta",{"property":"og:site_name","content":"王先生的博客"}],["meta",{"property":"og:title","content":"01 Buffer（缓冲器）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-23T09:50:27.000Z"}],["meta",{"property":"article:author","content":"Mr.Wang"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:modified_time","content":"2024-05-23T09:50:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01 Buffer（缓冲器）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-23T09:50:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Wang\\"}]}"]]},"headers":[{"level":2,"title":"1. 概念","slug":"_1-概念","link":"#_1-概念","children":[]},{"level":2,"title":"2. 特点","slug":"_2-特点","link":"#_2-特点","children":[]},{"level":2,"title":"3. 使用","slug":"_3-使用","link":"#_3-使用","children":[{"level":3,"title":"3-1. 创建Buffer","slug":"_3-1-创建buffer","link":"#_3-1-创建buffer","children":[]},{"level":3,"title":"3-2. Buffer与字符串转化","slug":"_3-2-buffer与字符串转化","link":"#_3-2-buffer与字符串转化","children":[]},{"level":3,"title":"3-3. Buffer的读写","slug":"_3-3-buffer的读写","link":"#_3-3-buffer的读写","children":[]}]}],"git":{"createdTime":1716457827000,"updatedTime":1716457827000,"contributors":[{"name":"王帅豪","email":"shuaihaome@163.com","commits":1}]},"readingTime":{"minutes":1.38,"words":415},"filePathRelative":"server/node/01.md","localizedDate":"2024年5月23日","excerpt":""}');export{k as comp,m as data};
